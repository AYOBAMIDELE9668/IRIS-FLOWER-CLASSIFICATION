# -*- coding: utf-8 -*-
"""Iris Flower Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yyno7LlF8yIAVXAeWnTBNbCybfBQsHv_

load dataset
"""

import pandas as pd

# Load the dataset
data = pd.read_csv('Iris.csv')

"""display first 5 rows"""

print("First few rows of the dataset:")
print(data.head())

# Check the shape of the dataset
print("\nShape of the dataset:", data.shape)

# Get basic information about the dataset
print("\nDataset info:")
print(data.info())

"""checking for missing values"""

# Check for missing values
print("\nMissing values in each column:")
print(data.isnull().sum())

"""summary statistics"""

# Summary statistics
print("\nSummary statistics:")
print(data.describe())

"""Visualize the distribution of species"""

import seaborn as sns
import matplotlib.pyplot as plt  # Import matplotlib.pyplot

# Visualize the distribution of species
plt.figure(figsize=(8, 6))
sns.countplot(x='Species', data=data)
plt.title('Distribution of Iris Species')
plt.show()

# Drop the 'Id' column as it's not useful for classification
data = data.drop(columns=['Id'])

# Import the LabelEncoder class
from sklearn.preprocessing import LabelEncoder

# Encode the 'Species' column into numerical values
label_encoder = LabelEncoder()
data['Species'] = label_encoder.fit_transform(data['Species'])

# Split the dataset into features (X) and target (y)
X = data.drop(columns=['Species'])
y = data['Species']

# Import the necessary function
from sklearn.model_selection import train_test_split

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("\nTraining set size:", X_train.shape)

print("Testing set size:", X_test.shape)

"""train model"""

# Import the necessary class
from sklearn.ensemble import RandomForestClassifier

# Initialize the Random Forest Classifier
model = RandomForestClassifier(random_state=42)

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Import the necessary class
from sklearn.ensemble import RandomForestClassifier
# Import accuracy_score
from sklearn.metrics import accuracy_score

# Initialize the Random Forest Classifier
model = RandomForestClassifier(random_state=42)

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print("\nAccuracy of the model:", round(accuracy * 100, 2), "%")

# Import the necessary class
from sklearn.ensemble import RandomForestClassifier
# Import accuracy_score
from sklearn.metrics import accuracy_score
# Import classification_report
from sklearn.metrics import classification_report # Importing the classification_report function

# Initialize the Random Forest Classifier
model = RandomForestClassifier(random_state=42)

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print("\nAccuracy of the model:", round(accuracy * 100, 2), "%")

# Print the classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

# Import the necessary class
from sklearn.ensemble import RandomForestClassifier
# Import accuracy_score
from sklearn.metrics import accuracy_score
# Import classification_report
from sklearn.metrics import classification_report # Importing the classification_report function
# Import confusion_matrix
from sklearn.metrics import confusion_matrix # Importing the confusion_matrix function

# Initialize the Random Forest Classifier
model = RandomForestClassifier(random_state=42)

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print("\nAccuracy of the model:", round(accuracy * 100, 2), "%")

# Print the classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

# Plot the confusion matrix
plt.figure(figsize=(8, 6))
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()